package voicetrainer.controllers {	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.TimerEvent;	import flash.text.TextField;	import flash.utils.Timer;	import flash.utils.getDefinitionByName;	import voicetrainer.data.GameStates;	import voicetrainer.data.vo.GameStateData;	import voicetrainer.data.vo.InputData;	import voicetrainer.data.vo.IntervalNameData;	import voicetrainer.ui.HarmonicController;	import voicetrainer.utils.IntervalHelper;	import voicetrainer.utils.NoteHelper;		/**
	 *	Copyright 2008 Base 42 
	 *	@author Jankees van Woezik
	 *  date: Jan 23, 2008
	 */
	public class GameController {		private var mHarmonic:HarmonicController;		private var mStage:Sprite;		private var mNoteHelper:NoteHelper;		private var mGameStates:Array;		private var mGameIsStated:Boolean;		private var mGameIsStarted:Boolean;		private var mCurrentLevel:Number = 0;		private var mCurrentGameState:GameStateData;		private static var HARMONIC_MC_MINIMAL_X:Number = 200;		private var mButton:MovieClip;		private var mTimer:Timer;		private var mGameTitle:Sprite;		public function GameController(inStage:Sprite) {			mStage = inStage;						mNoteHelper = new NoteHelper();			mGameStates = new GameStates().getStates();						mCurrentLevel = 0;						createUI();			startLevel(mCurrentLevel);		}				private function createUI():void {			mButton = new (getDefinitionByName("button_mc"))();			mButton.y = 150;			mButton.x = 450;			mStage.addChild(mButton);			mHarmonic = new (getDefinitionByName("harmonic_mc"))();			mHarmonic.y = 150;			mHarmonic.x = HARMONIC_MC_MINIMAL_X;			mStage.addChild(mHarmonic);						mTimer = new Timer(1000);			mTimer.addEventListener(TimerEvent.TIMER, handleTimer);						mGameTitle = new (getDefinitionByName("gameTitle_mc"))();			mGameTitle.y = 10;			mStage.addChild(mGameTitle);		}		private function handleTimer(e:TimerEvent):void {			mTimer.stop();						mCurrentLevel += 1;			startLevel(mCurrentLevel);			mButton.gotoAndStop(1);			mHarmonic.x = HARMONIC_MC_MINIMAL_X;		}		private function startLevel(inLevel:Number):void {			if(inLevel >= mGameStates.length) {				inLevel = 0;			}			TextField(mGameTitle["gameTitle_tf"]).text = GameStateData(mGameStates[inLevel]).state_name;			mCurrentGameState = GameStateData(mGameStates[inLevel]);			mGameIsStarted = true;		}		public function setInputNotes(dataLeft:InputData, dataRight:InputData):void {			if(mGameIsStarted) {				var mLeftInputIndex:Number = mNoteHelper.getNearestIndexByPitch(dataLeft.pitch);				var mRightInputIndex:Number = mNoteHelper.getNearestIndexByPitch(dataRight.pitch);							var diff:Number = Math.abs(mLeftInputIndex - mRightInputIndex);				var interval:IntervalNameData = IntervalHelper.getIntervalNameData(diff);											if (interval.interval_name == IntervalNameData(mCurrentGameState.state_interval).interval_name) {					mHarmonic.x += 1;				}else {					if(mHarmonic.x > HARMONIC_MC_MINIMAL_X) mHarmonic.x -= .5;				}								checkButtonReached();			}		}		private function checkButtonReached():void {			if(mHarmonic.x >= mButton.x) {				trace("checkButtonReached!", toString());				mButton.gotoAndStop(2);				mGameIsStarted = false;				mTimer.start();			}		}		public function toString():String {			return "voicetrainer.controllers.GameController";		}	}}